/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MAILDeployerInterface extends ethers.utils.Interface {
  functions: {
    "BRIDGE_TOKEN()": FunctionFragment;
    "BTC()": FunctionFragment;
    "ORACLE()": FunctionFragment;
    "UNISWAP_V3_FACTORY()": FunctionFragment;
    "USDC()": FunctionFragment;
    "USDT()": FunctionFragment;
    "addUniswapV3Fee(uint24)": FunctionFragment;
    "deploy(address)": FunctionFragment;
    "fees(uint256)": FunctionFragment;
    "getInterestRateModel(address)": FunctionFragment;
    "getMarket(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "predictMarketAddress(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveFactor()": FunctionFragment;
    "riskyAsset()": FunctionFragment;
    "riskyAssetInterestRateModel()": FunctionFragment;
    "setInterestRateModel(address,address)": FunctionFragment;
    "setReserveFactor(uint256)": FunctionFragment;
    "setRiskyAssetInterestRateModel(address)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BRIDGE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BTC", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORACLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UNISWAP_V3_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addUniswapV3Fee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deploy", values: [string]): string;
  encodeFunctionData(functionFragment: "fees", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getInterestRateModel",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getMarket", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predictMarketAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "riskyAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "riskyAssetInterestRateModel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateModel",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRiskyAssetInterestRateModel",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BRIDGE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BTC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORACLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UNISWAP_V3_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addUniswapV3Fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictMarketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "riskyAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "riskyAssetInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRiskyAssetInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {
    "MarketCreated(address)": EventFragment;
    "NewUniSwapFee(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetInterestRateModel(address,address)": EventFragment;
    "SetReserveFactor(uint256)": EventFragment;
    "SetTreasury(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewUniSwapFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetInterestRateModel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReserveFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTreasury"): EventFragment;
}

export type MarketCreatedEvent = TypedEvent<[string] & { market: string }>;

export type NewUniSwapFeeEvent = TypedEvent<[BigNumber] & { fee: BigNumber }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetInterestRateModelEvent = TypedEvent<
  [string, string] & { token: string; interestRateModel: string }
>;

export type SetReserveFactorEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type SetTreasuryEvent = TypedEvent<[string] & { account: string }>;

export class MAILDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MAILDeployerInterface;

  functions: {
    BRIDGE_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    BTC(overrides?: CallOverrides): Promise<[string]>;

    ORACLE(overrides?: CallOverrides): Promise<[string]>;

    UNISWAP_V3_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    USDT(overrides?: CallOverrides): Promise<[string]>;

    addUniswapV3Fee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deploy(
      _riskyAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fees(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    getInterestRateModel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarket(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    predictMarketAddress(
      _riskyAsset: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    riskyAsset(overrides?: CallOverrides): Promise<[string]>;

    riskyAssetInterestRateModel(overrides?: CallOverrides): Promise<[string]>;

    setInterestRateModel(
      token: string,
      interestRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveFactor(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRiskyAssetInterestRateModel(
      interestRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  BRIDGE_TOKEN(overrides?: CallOverrides): Promise<string>;

  BTC(overrides?: CallOverrides): Promise<string>;

  ORACLE(overrides?: CallOverrides): Promise<string>;

  UNISWAP_V3_FACTORY(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  USDT(overrides?: CallOverrides): Promise<string>;

  addUniswapV3Fee(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deploy(
    _riskyAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fees(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getInterestRateModel(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarket(arg0: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  predictMarketAddress(
    _riskyAsset: string,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

  riskyAsset(overrides?: CallOverrides): Promise<string>;

  riskyAssetInterestRateModel(overrides?: CallOverrides): Promise<string>;

  setInterestRateModel(
    token: string,
    interestRateModel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveFactor(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRiskyAssetInterestRateModel(
    interestRateModel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BRIDGE_TOKEN(overrides?: CallOverrides): Promise<string>;

    BTC(overrides?: CallOverrides): Promise<string>;

    ORACLE(overrides?: CallOverrides): Promise<string>;

    UNISWAP_V3_FACTORY(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    USDT(overrides?: CallOverrides): Promise<string>;

    addUniswapV3Fee(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deploy(_riskyAsset: string, overrides?: CallOverrides): Promise<string>;

    fees(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    getInterestRateModel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarket(arg0: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    predictMarketAddress(
      _riskyAsset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    riskyAsset(overrides?: CallOverrides): Promise<string>;

    riskyAssetInterestRateModel(overrides?: CallOverrides): Promise<string>;

    setInterestRateModel(
      token: string,
      interestRateModel: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveFactor(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRiskyAssetInterestRateModel(
      interestRateModel: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(account: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "MarketCreated(address)"(
      market?: string | null
    ): TypedEventFilter<[string], { market: string }>;

    MarketCreated(
      market?: string | null
    ): TypedEventFilter<[string], { market: string }>;

    "NewUniSwapFee(uint256)"(
      fee?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    NewUniSwapFee(
      fee?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetInterestRateModel(address,address)"(
      token?: string | null,
      interestRateModel?: string | null
    ): TypedEventFilter<
      [string, string],
      { token: string; interestRateModel: string }
    >;

    SetInterestRateModel(
      token?: string | null,
      interestRateModel?: string | null
    ): TypedEventFilter<
      [string, string],
      { token: string; interestRateModel: string }
    >;

    "SetReserveFactor(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    SetReserveFactor(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "SetTreasury(address)"(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    SetTreasury(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    BRIDGE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    BTC(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    UNISWAP_V3_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    USDT(overrides?: CallOverrides): Promise<BigNumber>;

    addUniswapV3Fee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deploy(
      _riskyAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fees(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getInterestRateModel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarket(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    predictMarketAddress(
      _riskyAsset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    riskyAsset(overrides?: CallOverrides): Promise<BigNumber>;

    riskyAssetInterestRateModel(overrides?: CallOverrides): Promise<BigNumber>;

    setInterestRateModel(
      token: string,
      interestRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveFactor(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRiskyAssetInterestRateModel(
      interestRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BRIDGE_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BTC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNISWAP_V3_FACTORY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addUniswapV3Fee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deploy(
      _riskyAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestRateModel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarket(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    predictMarketAddress(
      _riskyAsset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskyAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskyAssetInterestRateModel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setInterestRateModel(
      token: string,
      interestRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveFactor(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRiskyAssetInterestRateModel(
      interestRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
